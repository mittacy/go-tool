// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package mapUtil

// GetKeysStringString 获取所有键
// @param m
// @return []String
func GetKeysStringString(m map[string]string) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringString 获取所有值
// @param m
// @return []String
func GetValuesStringString(m map[string]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringString 获取所有键和值
// @param m
// @return []String
func GetKVStringString(m map[string]string) ([]string, []string) {
	keys := make([]string, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringRune 获取所有键
// @param m
// @return []String
func GetKeysStringRune(m map[string]rune) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringRune 获取所有值
// @param m
// @return []Rune
func GetValuesStringRune(m map[string]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringRune 获取所有键和值
// @param m
// @return []Rune
func GetKVStringRune(m map[string]rune) ([]string, []rune) {
	keys := make([]string, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringInt8 获取所有键
// @param m
// @return []String
func GetKeysStringInt8(m map[string]int8) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringInt8 获取所有值
// @param m
// @return []Int8
func GetValuesStringInt8(m map[string]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringInt8 获取所有键和值
// @param m
// @return []Int8
func GetKVStringInt8(m map[string]int8) ([]string, []int8) {
	keys := make([]string, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringInt16 获取所有键
// @param m
// @return []String
func GetKeysStringInt16(m map[string]int16) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringInt16 获取所有值
// @param m
// @return []Int16
func GetValuesStringInt16(m map[string]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringInt16 获取所有键和值
// @param m
// @return []Int16
func GetKVStringInt16(m map[string]int16) ([]string, []int16) {
	keys := make([]string, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringInt 获取所有键
// @param m
// @return []String
func GetKeysStringInt(m map[string]int) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringInt 获取所有值
// @param m
// @return []Int
func GetValuesStringInt(m map[string]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringInt 获取所有键和值
// @param m
// @return []Int
func GetKVStringInt(m map[string]int) ([]string, []int) {
	keys := make([]string, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringInt32 获取所有键
// @param m
// @return []String
func GetKeysStringInt32(m map[string]int32) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringInt32 获取所有值
// @param m
// @return []Int32
func GetValuesStringInt32(m map[string]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringInt32 获取所有键和值
// @param m
// @return []Int32
func GetKVStringInt32(m map[string]int32) ([]string, []int32) {
	keys := make([]string, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringInt64 获取所有键
// @param m
// @return []String
func GetKeysStringInt64(m map[string]int64) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringInt64 获取所有值
// @param m
// @return []Int64
func GetValuesStringInt64(m map[string]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringInt64 获取所有键和值
// @param m
// @return []Int64
func GetKVStringInt64(m map[string]int64) ([]string, []int64) {
	keys := make([]string, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringFloat32 获取所有键
// @param m
// @return []String
func GetKeysStringFloat32(m map[string]float32) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringFloat32 获取所有值
// @param m
// @return []Float32
func GetValuesStringFloat32(m map[string]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringFloat32 获取所有键和值
// @param m
// @return []Float32
func GetKVStringFloat32(m map[string]float32) ([]string, []float32) {
	keys := make([]string, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysStringFloat64 获取所有键
// @param m
// @return []String
func GetKeysStringFloat64(m map[string]float64) []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesStringFloat64 获取所有值
// @param m
// @return []Float64
func GetValuesStringFloat64(m map[string]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVStringFloat64 获取所有键和值
// @param m
// @return []Float64
func GetKVStringFloat64(m map[string]float64) ([]string, []float64) {
	keys := make([]string, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneString 获取所有键
// @param m
// @return []Rune
func GetKeysRuneString(m map[rune]string) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneString 获取所有值
// @param m
// @return []String
func GetValuesRuneString(m map[rune]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneString 获取所有键和值
// @param m
// @return []String
func GetKVRuneString(m map[rune]string) ([]rune, []string) {
	keys := make([]rune, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneRune 获取所有键
// @param m
// @return []Rune
func GetKeysRuneRune(m map[rune]rune) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneRune 获取所有值
// @param m
// @return []Rune
func GetValuesRuneRune(m map[rune]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneRune 获取所有键和值
// @param m
// @return []Rune
func GetKVRuneRune(m map[rune]rune) ([]rune, []rune) {
	keys := make([]rune, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneInt8 获取所有键
// @param m
// @return []Rune
func GetKeysRuneInt8(m map[rune]int8) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneInt8 获取所有值
// @param m
// @return []Int8
func GetValuesRuneInt8(m map[rune]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneInt8 获取所有键和值
// @param m
// @return []Int8
func GetKVRuneInt8(m map[rune]int8) ([]rune, []int8) {
	keys := make([]rune, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneInt16 获取所有键
// @param m
// @return []Rune
func GetKeysRuneInt16(m map[rune]int16) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneInt16 获取所有值
// @param m
// @return []Int16
func GetValuesRuneInt16(m map[rune]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneInt16 获取所有键和值
// @param m
// @return []Int16
func GetKVRuneInt16(m map[rune]int16) ([]rune, []int16) {
	keys := make([]rune, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneInt 获取所有键
// @param m
// @return []Rune
func GetKeysRuneInt(m map[rune]int) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneInt 获取所有值
// @param m
// @return []Int
func GetValuesRuneInt(m map[rune]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneInt 获取所有键和值
// @param m
// @return []Int
func GetKVRuneInt(m map[rune]int) ([]rune, []int) {
	keys := make([]rune, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneInt32 获取所有键
// @param m
// @return []Rune
func GetKeysRuneInt32(m map[rune]int32) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneInt32 获取所有值
// @param m
// @return []Int32
func GetValuesRuneInt32(m map[rune]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneInt32 获取所有键和值
// @param m
// @return []Int32
func GetKVRuneInt32(m map[rune]int32) ([]rune, []int32) {
	keys := make([]rune, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneInt64 获取所有键
// @param m
// @return []Rune
func GetKeysRuneInt64(m map[rune]int64) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneInt64 获取所有值
// @param m
// @return []Int64
func GetValuesRuneInt64(m map[rune]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneInt64 获取所有键和值
// @param m
// @return []Int64
func GetKVRuneInt64(m map[rune]int64) ([]rune, []int64) {
	keys := make([]rune, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneFloat32 获取所有键
// @param m
// @return []Rune
func GetKeysRuneFloat32(m map[rune]float32) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneFloat32 获取所有值
// @param m
// @return []Float32
func GetValuesRuneFloat32(m map[rune]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneFloat32 获取所有键和值
// @param m
// @return []Float32
func GetKVRuneFloat32(m map[rune]float32) ([]rune, []float32) {
	keys := make([]rune, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysRuneFloat64 获取所有键
// @param m
// @return []Rune
func GetKeysRuneFloat64(m map[rune]float64) []rune {
	keys := make([]rune, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesRuneFloat64 获取所有值
// @param m
// @return []Float64
func GetValuesRuneFloat64(m map[rune]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVRuneFloat64 获取所有键和值
// @param m
// @return []Float64
func GetKVRuneFloat64(m map[rune]float64) ([]rune, []float64) {
	keys := make([]rune, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8String 获取所有键
// @param m
// @return []Int8
func GetKeysInt8String(m map[int8]string) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8String 获取所有值
// @param m
// @return []String
func GetValuesInt8String(m map[int8]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8String 获取所有键和值
// @param m
// @return []String
func GetKVInt8String(m map[int8]string) ([]int8, []string) {
	keys := make([]int8, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Rune 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Rune(m map[int8]rune) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Rune 获取所有值
// @param m
// @return []Rune
func GetValuesInt8Rune(m map[int8]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Rune 获取所有键和值
// @param m
// @return []Rune
func GetKVInt8Rune(m map[int8]rune) ([]int8, []rune) {
	keys := make([]int8, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Int8 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Int8(m map[int8]int8) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Int8 获取所有值
// @param m
// @return []Int8
func GetValuesInt8Int8(m map[int8]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Int8 获取所有键和值
// @param m
// @return []Int8
func GetKVInt8Int8(m map[int8]int8) ([]int8, []int8) {
	keys := make([]int8, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Int16 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Int16(m map[int8]int16) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Int16 获取所有值
// @param m
// @return []Int16
func GetValuesInt8Int16(m map[int8]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Int16 获取所有键和值
// @param m
// @return []Int16
func GetKVInt8Int16(m map[int8]int16) ([]int8, []int16) {
	keys := make([]int8, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Int 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Int(m map[int8]int) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Int 获取所有值
// @param m
// @return []Int
func GetValuesInt8Int(m map[int8]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Int 获取所有键和值
// @param m
// @return []Int
func GetKVInt8Int(m map[int8]int) ([]int8, []int) {
	keys := make([]int8, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Int32 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Int32(m map[int8]int32) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Int32 获取所有值
// @param m
// @return []Int32
func GetValuesInt8Int32(m map[int8]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Int32 获取所有键和值
// @param m
// @return []Int32
func GetKVInt8Int32(m map[int8]int32) ([]int8, []int32) {
	keys := make([]int8, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Int64 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Int64(m map[int8]int64) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Int64 获取所有值
// @param m
// @return []Int64
func GetValuesInt8Int64(m map[int8]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Int64 获取所有键和值
// @param m
// @return []Int64
func GetKVInt8Int64(m map[int8]int64) ([]int8, []int64) {
	keys := make([]int8, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Float32 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Float32(m map[int8]float32) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Float32 获取所有值
// @param m
// @return []Float32
func GetValuesInt8Float32(m map[int8]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Float32 获取所有键和值
// @param m
// @return []Float32
func GetKVInt8Float32(m map[int8]float32) ([]int8, []float32) {
	keys := make([]int8, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt8Float64 获取所有键
// @param m
// @return []Int8
func GetKeysInt8Float64(m map[int8]float64) []int8 {
	keys := make([]int8, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt8Float64 获取所有值
// @param m
// @return []Float64
func GetValuesInt8Float64(m map[int8]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt8Float64 获取所有键和值
// @param m
// @return []Float64
func GetKVInt8Float64(m map[int8]float64) ([]int8, []float64) {
	keys := make([]int8, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16String 获取所有键
// @param m
// @return []Int16
func GetKeysInt16String(m map[int16]string) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16String 获取所有值
// @param m
// @return []String
func GetValuesInt16String(m map[int16]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16String 获取所有键和值
// @param m
// @return []String
func GetKVInt16String(m map[int16]string) ([]int16, []string) {
	keys := make([]int16, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Rune 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Rune(m map[int16]rune) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Rune 获取所有值
// @param m
// @return []Rune
func GetValuesInt16Rune(m map[int16]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Rune 获取所有键和值
// @param m
// @return []Rune
func GetKVInt16Rune(m map[int16]rune) ([]int16, []rune) {
	keys := make([]int16, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Int8 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Int8(m map[int16]int8) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Int8 获取所有值
// @param m
// @return []Int8
func GetValuesInt16Int8(m map[int16]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Int8 获取所有键和值
// @param m
// @return []Int8
func GetKVInt16Int8(m map[int16]int8) ([]int16, []int8) {
	keys := make([]int16, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Int16 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Int16(m map[int16]int16) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Int16 获取所有值
// @param m
// @return []Int16
func GetValuesInt16Int16(m map[int16]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Int16 获取所有键和值
// @param m
// @return []Int16
func GetKVInt16Int16(m map[int16]int16) ([]int16, []int16) {
	keys := make([]int16, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Int 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Int(m map[int16]int) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Int 获取所有值
// @param m
// @return []Int
func GetValuesInt16Int(m map[int16]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Int 获取所有键和值
// @param m
// @return []Int
func GetKVInt16Int(m map[int16]int) ([]int16, []int) {
	keys := make([]int16, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Int32 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Int32(m map[int16]int32) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Int32 获取所有值
// @param m
// @return []Int32
func GetValuesInt16Int32(m map[int16]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Int32 获取所有键和值
// @param m
// @return []Int32
func GetKVInt16Int32(m map[int16]int32) ([]int16, []int32) {
	keys := make([]int16, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Int64 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Int64(m map[int16]int64) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Int64 获取所有值
// @param m
// @return []Int64
func GetValuesInt16Int64(m map[int16]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Int64 获取所有键和值
// @param m
// @return []Int64
func GetKVInt16Int64(m map[int16]int64) ([]int16, []int64) {
	keys := make([]int16, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Float32 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Float32(m map[int16]float32) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Float32 获取所有值
// @param m
// @return []Float32
func GetValuesInt16Float32(m map[int16]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Float32 获取所有键和值
// @param m
// @return []Float32
func GetKVInt16Float32(m map[int16]float32) ([]int16, []float32) {
	keys := make([]int16, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt16Float64 获取所有键
// @param m
// @return []Int16
func GetKeysInt16Float64(m map[int16]float64) []int16 {
	keys := make([]int16, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt16Float64 获取所有值
// @param m
// @return []Float64
func GetValuesInt16Float64(m map[int16]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt16Float64 获取所有键和值
// @param m
// @return []Float64
func GetKVInt16Float64(m map[int16]float64) ([]int16, []float64) {
	keys := make([]int16, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntString 获取所有键
// @param m
// @return []Int
func GetKeysIntString(m map[int]string) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntString 获取所有值
// @param m
// @return []String
func GetValuesIntString(m map[int]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntString 获取所有键和值
// @param m
// @return []String
func GetKVIntString(m map[int]string) ([]int, []string) {
	keys := make([]int, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntRune 获取所有键
// @param m
// @return []Int
func GetKeysIntRune(m map[int]rune) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntRune 获取所有值
// @param m
// @return []Rune
func GetValuesIntRune(m map[int]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntRune 获取所有键和值
// @param m
// @return []Rune
func GetKVIntRune(m map[int]rune) ([]int, []rune) {
	keys := make([]int, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntInt8 获取所有键
// @param m
// @return []Int
func GetKeysIntInt8(m map[int]int8) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntInt8 获取所有值
// @param m
// @return []Int8
func GetValuesIntInt8(m map[int]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntInt8 获取所有键和值
// @param m
// @return []Int8
func GetKVIntInt8(m map[int]int8) ([]int, []int8) {
	keys := make([]int, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntInt16 获取所有键
// @param m
// @return []Int
func GetKeysIntInt16(m map[int]int16) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntInt16 获取所有值
// @param m
// @return []Int16
func GetValuesIntInt16(m map[int]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntInt16 获取所有键和值
// @param m
// @return []Int16
func GetKVIntInt16(m map[int]int16) ([]int, []int16) {
	keys := make([]int, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntInt 获取所有键
// @param m
// @return []Int
func GetKeysIntInt(m map[int]int) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntInt 获取所有值
// @param m
// @return []Int
func GetValuesIntInt(m map[int]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntInt 获取所有键和值
// @param m
// @return []Int
func GetKVIntInt(m map[int]int) ([]int, []int) {
	keys := make([]int, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntInt32 获取所有键
// @param m
// @return []Int
func GetKeysIntInt32(m map[int]int32) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntInt32 获取所有值
// @param m
// @return []Int32
func GetValuesIntInt32(m map[int]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntInt32 获取所有键和值
// @param m
// @return []Int32
func GetKVIntInt32(m map[int]int32) ([]int, []int32) {
	keys := make([]int, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntInt64 获取所有键
// @param m
// @return []Int
func GetKeysIntInt64(m map[int]int64) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntInt64 获取所有值
// @param m
// @return []Int64
func GetValuesIntInt64(m map[int]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntInt64 获取所有键和值
// @param m
// @return []Int64
func GetKVIntInt64(m map[int]int64) ([]int, []int64) {
	keys := make([]int, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntFloat32 获取所有键
// @param m
// @return []Int
func GetKeysIntFloat32(m map[int]float32) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntFloat32 获取所有值
// @param m
// @return []Float32
func GetValuesIntFloat32(m map[int]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntFloat32 获取所有键和值
// @param m
// @return []Float32
func GetKVIntFloat32(m map[int]float32) ([]int, []float32) {
	keys := make([]int, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysIntFloat64 获取所有键
// @param m
// @return []Int
func GetKeysIntFloat64(m map[int]float64) []int {
	keys := make([]int, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesIntFloat64 获取所有值
// @param m
// @return []Float64
func GetValuesIntFloat64(m map[int]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVIntFloat64 获取所有键和值
// @param m
// @return []Float64
func GetKVIntFloat64(m map[int]float64) ([]int, []float64) {
	keys := make([]int, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32String 获取所有键
// @param m
// @return []Int32
func GetKeysInt32String(m map[int32]string) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32String 获取所有值
// @param m
// @return []String
func GetValuesInt32String(m map[int32]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32String 获取所有键和值
// @param m
// @return []String
func GetKVInt32String(m map[int32]string) ([]int32, []string) {
	keys := make([]int32, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Rune 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Rune(m map[int32]rune) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Rune 获取所有值
// @param m
// @return []Rune
func GetValuesInt32Rune(m map[int32]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Rune 获取所有键和值
// @param m
// @return []Rune
func GetKVInt32Rune(m map[int32]rune) ([]int32, []rune) {
	keys := make([]int32, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Int8 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Int8(m map[int32]int8) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Int8 获取所有值
// @param m
// @return []Int8
func GetValuesInt32Int8(m map[int32]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Int8 获取所有键和值
// @param m
// @return []Int8
func GetKVInt32Int8(m map[int32]int8) ([]int32, []int8) {
	keys := make([]int32, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Int16 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Int16(m map[int32]int16) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Int16 获取所有值
// @param m
// @return []Int16
func GetValuesInt32Int16(m map[int32]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Int16 获取所有键和值
// @param m
// @return []Int16
func GetKVInt32Int16(m map[int32]int16) ([]int32, []int16) {
	keys := make([]int32, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Int 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Int(m map[int32]int) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Int 获取所有值
// @param m
// @return []Int
func GetValuesInt32Int(m map[int32]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Int 获取所有键和值
// @param m
// @return []Int
func GetKVInt32Int(m map[int32]int) ([]int32, []int) {
	keys := make([]int32, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Int32 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Int32(m map[int32]int32) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Int32 获取所有值
// @param m
// @return []Int32
func GetValuesInt32Int32(m map[int32]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Int32 获取所有键和值
// @param m
// @return []Int32
func GetKVInt32Int32(m map[int32]int32) ([]int32, []int32) {
	keys := make([]int32, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Int64 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Int64(m map[int32]int64) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Int64 获取所有值
// @param m
// @return []Int64
func GetValuesInt32Int64(m map[int32]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Int64 获取所有键和值
// @param m
// @return []Int64
func GetKVInt32Int64(m map[int32]int64) ([]int32, []int64) {
	keys := make([]int32, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Float32 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Float32(m map[int32]float32) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Float32 获取所有值
// @param m
// @return []Float32
func GetValuesInt32Float32(m map[int32]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Float32 获取所有键和值
// @param m
// @return []Float32
func GetKVInt32Float32(m map[int32]float32) ([]int32, []float32) {
	keys := make([]int32, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt32Float64 获取所有键
// @param m
// @return []Int32
func GetKeysInt32Float64(m map[int32]float64) []int32 {
	keys := make([]int32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt32Float64 获取所有值
// @param m
// @return []Float64
func GetValuesInt32Float64(m map[int32]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt32Float64 获取所有键和值
// @param m
// @return []Float64
func GetKVInt32Float64(m map[int32]float64) ([]int32, []float64) {
	keys := make([]int32, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64String 获取所有键
// @param m
// @return []Int64
func GetKeysInt64String(m map[int64]string) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64String 获取所有值
// @param m
// @return []String
func GetValuesInt64String(m map[int64]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64String 获取所有键和值
// @param m
// @return []String
func GetKVInt64String(m map[int64]string) ([]int64, []string) {
	keys := make([]int64, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Rune 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Rune(m map[int64]rune) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Rune 获取所有值
// @param m
// @return []Rune
func GetValuesInt64Rune(m map[int64]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Rune 获取所有键和值
// @param m
// @return []Rune
func GetKVInt64Rune(m map[int64]rune) ([]int64, []rune) {
	keys := make([]int64, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Int8 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Int8(m map[int64]int8) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Int8 获取所有值
// @param m
// @return []Int8
func GetValuesInt64Int8(m map[int64]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Int8 获取所有键和值
// @param m
// @return []Int8
func GetKVInt64Int8(m map[int64]int8) ([]int64, []int8) {
	keys := make([]int64, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Int16 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Int16(m map[int64]int16) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Int16 获取所有值
// @param m
// @return []Int16
func GetValuesInt64Int16(m map[int64]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Int16 获取所有键和值
// @param m
// @return []Int16
func GetKVInt64Int16(m map[int64]int16) ([]int64, []int16) {
	keys := make([]int64, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Int 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Int(m map[int64]int) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Int 获取所有值
// @param m
// @return []Int
func GetValuesInt64Int(m map[int64]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Int 获取所有键和值
// @param m
// @return []Int
func GetKVInt64Int(m map[int64]int) ([]int64, []int) {
	keys := make([]int64, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Int32 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Int32(m map[int64]int32) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Int32 获取所有值
// @param m
// @return []Int32
func GetValuesInt64Int32(m map[int64]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Int32 获取所有键和值
// @param m
// @return []Int32
func GetKVInt64Int32(m map[int64]int32) ([]int64, []int32) {
	keys := make([]int64, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Int64 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Int64(m map[int64]int64) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Int64 获取所有值
// @param m
// @return []Int64
func GetValuesInt64Int64(m map[int64]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Int64 获取所有键和值
// @param m
// @return []Int64
func GetKVInt64Int64(m map[int64]int64) ([]int64, []int64) {
	keys := make([]int64, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Float32 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Float32(m map[int64]float32) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Float32 获取所有值
// @param m
// @return []Float32
func GetValuesInt64Float32(m map[int64]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Float32 获取所有键和值
// @param m
// @return []Float32
func GetKVInt64Float32(m map[int64]float32) ([]int64, []float32) {
	keys := make([]int64, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysInt64Float64 获取所有键
// @param m
// @return []Int64
func GetKeysInt64Float64(m map[int64]float64) []int64 {
	keys := make([]int64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesInt64Float64 获取所有值
// @param m
// @return []Float64
func GetValuesInt64Float64(m map[int64]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVInt64Float64 获取所有键和值
// @param m
// @return []Float64
func GetKVInt64Float64(m map[int64]float64) ([]int64, []float64) {
	keys := make([]int64, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32String 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32String(m map[float32]string) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32String 获取所有值
// @param m
// @return []String
func GetValuesFloat32String(m map[float32]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32String 获取所有键和值
// @param m
// @return []String
func GetKVFloat32String(m map[float32]string) ([]float32, []string) {
	keys := make([]float32, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Rune 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Rune(m map[float32]rune) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Rune 获取所有值
// @param m
// @return []Rune
func GetValuesFloat32Rune(m map[float32]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Rune 获取所有键和值
// @param m
// @return []Rune
func GetKVFloat32Rune(m map[float32]rune) ([]float32, []rune) {
	keys := make([]float32, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Int8 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Int8(m map[float32]int8) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Int8 获取所有值
// @param m
// @return []Int8
func GetValuesFloat32Int8(m map[float32]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Int8 获取所有键和值
// @param m
// @return []Int8
func GetKVFloat32Int8(m map[float32]int8) ([]float32, []int8) {
	keys := make([]float32, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Int16 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Int16(m map[float32]int16) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Int16 获取所有值
// @param m
// @return []Int16
func GetValuesFloat32Int16(m map[float32]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Int16 获取所有键和值
// @param m
// @return []Int16
func GetKVFloat32Int16(m map[float32]int16) ([]float32, []int16) {
	keys := make([]float32, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Int 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Int(m map[float32]int) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Int 获取所有值
// @param m
// @return []Int
func GetValuesFloat32Int(m map[float32]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Int 获取所有键和值
// @param m
// @return []Int
func GetKVFloat32Int(m map[float32]int) ([]float32, []int) {
	keys := make([]float32, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Int32 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Int32(m map[float32]int32) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Int32 获取所有值
// @param m
// @return []Int32
func GetValuesFloat32Int32(m map[float32]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Int32 获取所有键和值
// @param m
// @return []Int32
func GetKVFloat32Int32(m map[float32]int32) ([]float32, []int32) {
	keys := make([]float32, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Int64 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Int64(m map[float32]int64) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Int64 获取所有值
// @param m
// @return []Int64
func GetValuesFloat32Int64(m map[float32]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Int64 获取所有键和值
// @param m
// @return []Int64
func GetKVFloat32Int64(m map[float32]int64) ([]float32, []int64) {
	keys := make([]float32, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Float32 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Float32(m map[float32]float32) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Float32 获取所有值
// @param m
// @return []Float32
func GetValuesFloat32Float32(m map[float32]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Float32 获取所有键和值
// @param m
// @return []Float32
func GetKVFloat32Float32(m map[float32]float32) ([]float32, []float32) {
	keys := make([]float32, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat32Float64 获取所有键
// @param m
// @return []Float32
func GetKeysFloat32Float64(m map[float32]float64) []float32 {
	keys := make([]float32, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat32Float64 获取所有值
// @param m
// @return []Float64
func GetValuesFloat32Float64(m map[float32]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat32Float64 获取所有键和值
// @param m
// @return []Float64
func GetKVFloat32Float64(m map[float32]float64) ([]float32, []float64) {
	keys := make([]float32, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64String 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64String(m map[float64]string) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64String 获取所有值
// @param m
// @return []String
func GetValuesFloat64String(m map[float64]string) []string {
	values := make([]string, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64String 获取所有键和值
// @param m
// @return []String
func GetKVFloat64String(m map[float64]string) ([]float64, []string) {
	keys := make([]float64, len(m))
	values := make([]string, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Rune 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Rune(m map[float64]rune) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Rune 获取所有值
// @param m
// @return []Rune
func GetValuesFloat64Rune(m map[float64]rune) []rune {
	values := make([]rune, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Rune 获取所有键和值
// @param m
// @return []Rune
func GetKVFloat64Rune(m map[float64]rune) ([]float64, []rune) {
	keys := make([]float64, len(m))
	values := make([]rune, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Int8 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Int8(m map[float64]int8) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Int8 获取所有值
// @param m
// @return []Int8
func GetValuesFloat64Int8(m map[float64]int8) []int8 {
	values := make([]int8, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Int8 获取所有键和值
// @param m
// @return []Int8
func GetKVFloat64Int8(m map[float64]int8) ([]float64, []int8) {
	keys := make([]float64, len(m))
	values := make([]int8, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Int16 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Int16(m map[float64]int16) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Int16 获取所有值
// @param m
// @return []Int16
func GetValuesFloat64Int16(m map[float64]int16) []int16 {
	values := make([]int16, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Int16 获取所有键和值
// @param m
// @return []Int16
func GetKVFloat64Int16(m map[float64]int16) ([]float64, []int16) {
	keys := make([]float64, len(m))
	values := make([]int16, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Int 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Int(m map[float64]int) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Int 获取所有值
// @param m
// @return []Int
func GetValuesFloat64Int(m map[float64]int) []int {
	values := make([]int, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Int 获取所有键和值
// @param m
// @return []Int
func GetKVFloat64Int(m map[float64]int) ([]float64, []int) {
	keys := make([]float64, len(m))
	values := make([]int, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Int32 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Int32(m map[float64]int32) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Int32 获取所有值
// @param m
// @return []Int32
func GetValuesFloat64Int32(m map[float64]int32) []int32 {
	values := make([]int32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Int32 获取所有键和值
// @param m
// @return []Int32
func GetKVFloat64Int32(m map[float64]int32) ([]float64, []int32) {
	keys := make([]float64, len(m))
	values := make([]int32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Int64 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Int64(m map[float64]int64) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Int64 获取所有值
// @param m
// @return []Int64
func GetValuesFloat64Int64(m map[float64]int64) []int64 {
	values := make([]int64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Int64 获取所有键和值
// @param m
// @return []Int64
func GetKVFloat64Int64(m map[float64]int64) ([]float64, []int64) {
	keys := make([]float64, len(m))
	values := make([]int64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Float32 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Float32(m map[float64]float32) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Float32 获取所有值
// @param m
// @return []Float32
func GetValuesFloat64Float32(m map[float64]float32) []float32 {
	values := make([]float32, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Float32 获取所有键和值
// @param m
// @return []Float32
func GetKVFloat64Float32(m map[float64]float32) ([]float64, []float32) {
	keys := make([]float64, len(m))
	values := make([]float32, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}

// GetKeysFloat64Float64 获取所有键
// @param m
// @return []Float64
func GetKeysFloat64Float64(m map[float64]float64) []float64 {
	keys := make([]float64, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

// GetValuesFloat64Float64 获取所有值
// @param m
// @return []Float64
func GetValuesFloat64Float64(m map[float64]float64) []float64 {
	values := make([]float64, len(m))
	i := 0
	for _, v := range m {
		values[i] = v
		i++
	}
	return values
}

// GetKVFloat64Float64 获取所有键和值
// @param m
// @return []Float64
func GetKVFloat64Float64(m map[float64]float64) ([]float64, []float64) {
	keys := make([]float64, len(m))
	values := make([]float64, len(m))

	i := 0
	for k, v := range m {
		keys[i] = k
		values[i] = v
		i++
	}

	return keys, values
}
