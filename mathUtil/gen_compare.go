// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package mathUtil

// MaxInt8 求最大值
// @param nums
// @return int 最大值第一次出现的索引
// @return int8 最大值
func MaxInt8(nums ...int8) (int, int8) {
	if len(nums) == 0 {
		return -1, 0
	}

	max := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}

	return index, max
}

// MinInt8 求最小值
// @param nums
// @return int 最小值第一次出现的索引
// @return int8 最小值
func MinInt8(nums ...int8) (int, int8) {
	if len(nums) == 0 {
		return -1, 0
	}

	min := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}

	return index, min
}

// MaxInt16 求最大值
// @param nums
// @return int 最大值第一次出现的索引
// @return int16 最大值
func MaxInt16(nums ...int16) (int, int16) {
	if len(nums) == 0 {
		return -1, 0
	}

	max := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}

	return index, max
}

// MinInt16 求最小值
// @param nums
// @return int 最小值第一次出现的索引
// @return int16 最小值
func MinInt16(nums ...int16) (int, int16) {
	if len(nums) == 0 {
		return -1, 0
	}

	min := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}

	return index, min
}

// MaxInt 求最大值
// @param nums
// @return int 最大值第一次出现的索引
// @return int 最大值
func MaxInt(nums ...int) (int, int) {
	if len(nums) == 0 {
		return -1, 0
	}

	max := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}

	return index, max
}

// MinInt 求最小值
// @param nums
// @return int 最小值第一次出现的索引
// @return int 最小值
func MinInt(nums ...int) (int, int) {
	if len(nums) == 0 {
		return -1, 0
	}

	min := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}

	return index, min
}

// MaxInt32 求最大值
// @param nums
// @return int 最大值第一次出现的索引
// @return int32 最大值
func MaxInt32(nums ...int32) (int, int32) {
	if len(nums) == 0 {
		return -1, 0
	}

	max := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}

	return index, max
}

// MinInt32 求最小值
// @param nums
// @return int 最小值第一次出现的索引
// @return int32 最小值
func MinInt32(nums ...int32) (int, int32) {
	if len(nums) == 0 {
		return -1, 0
	}

	min := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}

	return index, min
}

// MaxInt64 求最大值
// @param nums
// @return int 最大值第一次出现的索引
// @return int64 最大值
func MaxInt64(nums ...int64) (int, int64) {
	if len(nums) == 0 {
		return -1, 0
	}

	max := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}

	return index, max
}

// MinInt64 求最小值
// @param nums
// @return int 最小值第一次出现的索引
// @return int64 最小值
func MinInt64(nums ...int64) (int, int64) {
	if len(nums) == 0 {
		return -1, 0
	}

	min := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}

	return index, min
}

// MaxFloat32 求最大值
// @param nums
// @return int 最大值第一次出现的索引
// @return float32 最大值
func MaxFloat32(nums ...float32) (int, float32) {
	if len(nums) == 0 {
		return -1, 0
	}

	max := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}

	return index, max
}

// MinFloat32 求最小值
// @param nums
// @return int 最小值第一次出现的索引
// @return float32 最小值
func MinFloat32(nums ...float32) (int, float32) {
	if len(nums) == 0 {
		return -1, 0
	}

	min := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}

	return index, min
}

// MaxFloat64 求最大值
// @param nums
// @return int 最大值第一次出现的索引
// @return float64 最大值
func MaxFloat64(nums ...float64) (int, float64) {
	if len(nums) == 0 {
		return -1, 0
	}

	max := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}

	return index, max
}

// MinFloat64 求最小值
// @param nums
// @return int 最小值第一次出现的索引
// @return float64 最小值
func MinFloat64(nums ...float64) (int, float64) {
	if len(nums) == 0 {
		return -1, 0
	}

	min := nums[0]
	index := 0

	for i := 1; i < len(nums); i++ {
		if nums[i] < min {
			min = nums[i]
			index = i
		}
	}

	return index, min
}
