// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package sliceUtil

// ToMapStringStruct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[String]struct{}
func ToMapStringStruct(values ...[]string) map[string]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[string]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapRuneStruct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Rune]struct{}
func ToMapRuneStruct(values ...[]rune) map[rune]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[rune]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapInt8Struct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Int8]struct{}
func ToMapInt8Struct(values ...[]int8) map[int8]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[int8]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapInt16Struct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Int16]struct{}
func ToMapInt16Struct(values ...[]int16) map[int16]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[int16]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapIntStruct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Int]struct{}
func ToMapIntStruct(values ...[]int) map[int]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[int]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapInt32Struct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Int32]struct{}
func ToMapInt32Struct(values ...[]int32) map[int32]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[int32]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapInt64Struct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Int64]struct{}
func ToMapInt64Struct(values ...[]int64) map[int64]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[int64]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapFloat32Struct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Float32]struct{}
func ToMapFloat32Struct(values ...[]float32) map[float32]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[float32]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}

// ToMapFloat64Struct 函数功能说明
// this method will remove duplicate elements
// @param values
// @return map[Float64]struct{}
func ToMapFloat64Struct(values ...[]float64) map[float64]struct{} {
	initLength := 0
	if len(values) == 1 {
		initLength = len(values[0])
	} else if len(values) > 0 {
		initLength = len(values[0]) * len(values)
	}

	m := make(map[float64]struct{}, initLength)
	for _, arr := range values {
		for _, v := range arr {
			m[v] = struct{}{}
		}
	}
	return m
}
